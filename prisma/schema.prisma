generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String    @id 
  cpn            String?   @default("-")  
  source         String?
  categoryId     String?   // Foreign key to Categories
  category       Categories? @relation(fields: [categoryId], references: [id]) // Relation to Categories
  name           String?
  datasheetLink  String?
  description    String?
  specifications Json?
  addedToCart    Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  manufacturer   String?   @default("-")
  mfrPartNumber  String?   @default("-")
  stockQty       Int?
  spq            Int?
  moq            Int?
  ltwks          String?   @default("-")
  remarks        String?   @default("-")
  @@index([categoryId])
  @@index([manufacturer])
  @@index([mfrPartNumber])
}

model Categories {
  id            String    @id @default(cuid())
  mainCategory  String
  category      String
  subCategory   String?
  products      Product[] // One-to-many relation with Product
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([mainCategory, category, subCategory]) // Ensure unique category combinations
  @@index([mainCategory]) // Index for fast filtering by mainCategory
  @@index([mainCategory, category]) // Composite index for mainCategory + category
}
model FromAddress {
  id             String   @id @default(cuid())
  addressLabel   String   @unique // Unique label/name for easy identification/selection
  addressDetails Json     // Stores line1, line2, city, state, country, postalCode etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]  // Relation to Orders using this address
}

// Modify the Order model
model Order {
  id             String   @id @default(cuid())
  orderId        String   @unique
  firstName      String 
  lastName       String 
  email          String?
  phoneNumber    String 
  products       Json
  totalAmount    Float?
  status         String   @default("Pending")
  trackingId     String?  @unique
  invoiceNumber  String?
  message        String?
  shippingAddress Json?
  billingAddress Json?
  fromAddressId  String?
  fromAddress    FromAddress? @relation(fields: [fromAddressId], references: [id])

  // Fields for Razorpay integration
  paymentStatus    String?  @default("PENDING")
  razorpayPaymentId String?  @unique
  razorpayOrderId   String?  @unique
  razorpaySignature String?
  clientId       Int?   
  client         Client?  @relation(fields: [clientId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status])
  @@index([fromAddressId])
  @@index([razorpayOrderId])
  @@index([clientId])
}

model Admin {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  email      String  @unique
  name       String
  password   String
  superAdmin Boolean @default(false)
  createdAt  DateTime @default(now())
}

model CareerApplication {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String?
  phoneNumber    String
  email          String
  areaOfInterest String
  referred       Boolean  @default(false) // Assuming 'Yes' maps to true, 'No' to false
  resumeUrl      String?  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([email])
}

model ContactInquiry {
  id              String   @id @default(cuid())
  fullName        String
  companyName     String?
  phoneNumber     String
  email           String
  productCategory String?
  message         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

   @@index([email])
}


model Client {
  id          Int     @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  phoneNumber String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders      Order[]
}